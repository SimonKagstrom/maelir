#!/usr/bin/env python3.11

import os
import io

from PIL import Image


def create_tiles(img: Image, tile_size: int):
    tiles = []
    cropped_width = img.size[0] - img.size[0] % tile_size
    cropped_height = img.size[1] - img.size[1] % tile_size

    for y in range(0, cropped_height, tile_size):
        for x in range(0, cropped_width, tile_size):
            tile = img.crop((x, y, x+tile_size, y+tile_size))
            tile = tile.convert(
                mode='P', palette=Image.ADAPTIVE, dither=None, colors=256)
            tiles.append(tile)

    return tiles


def create_source_files(tiles: list, row_length: int, out_base: str):
    hh_file = open(os.path.join("{}.hh".format(out_base)), "w")
    cc_file = open(os.path.join("{}.cc".format(out_base)), "w")
    hh_file.write("""// This file was generated by tiler.py
#pragma once

#include <cstdint>

constexpr auto kTileSize = {};
constexpr auto kRowSize = {};

""".format(tiles[0].size[0], row_length))

    cc_file.write("""// This file was generated by tiler.py
#include "{out_base}.hh"

""".format(out_base=out_base))
    for index, tile in enumerate(tiles):
        output = io.BytesIO()
        tile.save(output, format='PNG')
        bytes = output.getvalue()

        cc_file.write("const std::array<const std::byte, {len}> {name} = {{\n    ".format(
            len=len(bytes), name=f"tile_{index}"))
        for b in range(0, len(bytes)):
            cur = bytes[b]
            cc_file.write("std::byte(0x{:02x}),{}".format(
                cur, "\n    " if b % 7 == 6 and b != len(bytes) - 1 else ""))

        cc_file.write("\n};\n\n")

        hh_file.write("extern const std::array<const std::byte, {len}> {name};\n".format(
            len=len(bytes), name=f"tile_{index}"))


def save_tiles(tiles: list, num_colors):
    for i, tile in enumerate(tiles):
        tile = tile.convert(mode='P', palette=Image.ADAPTIVE,
                            dither=None, colors=num_colors)
        tile.save(f'tile_{i}.png', optimize=True, format="PNG")


if __name__ == "__main__":
    img = Image.open('/Users/ska/Downloads/sjokort.png')
    num_pixels = img.size[0]*img.size[1]
    num_colors = len(img.getcolors(num_pixels))

    tile_size = 240
    tiles = create_tiles(img, tile_size=tile_size)
    # save_tiles(tiles, num_colors=256)
    create_source_files(
        tiles, row_length=int(img.size[0] / tile_size), out_base="tile")
